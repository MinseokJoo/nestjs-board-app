nest new 프로젝트 이름 : 프로젝트 시작하기
nest g module 이름 : 모듈 생성하기
nest g controller 이름 : 컨트롤러 생성하기 (--no-spec : 테스트를 위한 소스 코드 생성 X)
nest g service 이름 : 서비스 생성하기

eslintrc,js : 개발자들이 특정한 규칙을 가지고 코드를 깔끔하게 짤수있개 도와주는 라이브러리,
              타입스크립트를 쓰는 가이드 라인 제시, 문법에 오류가 나면 알려주는 역할 등등

prettierrc : 주로 코드 형식을 맞추는 데 사용함, 작은따옴표를 사용할지 큰따옴표를 사용할지, indent 값을 2로 할지 4로 줄지 등등
              에러를 찾는 것이 아닌 코드 포맷터 역할

nest-cli.json : Nest 프로젝트를 위해 특정한 설정을 할 수 있는 json 파일

tsconfig.json : 어떻게 타입스크립트를 컴파일 할지 설정

tsconfig.build.json : tsconfig.json의 연장선상 파일이며, build를 할 때 필요한 설정들, excludes에서는 빌드할 때 필요없는 파일 명시

package.json : build => 운영환경을 위한 빌드, format => 린트 에러가 났을 지 수정, start => 앱 시작

src 디렉토리 : 대부분의 비즈니스 로직이 들어가는 곳
  main.ts : 앱을 생성하고 실행
  app.module.ts : 앱 모듈의 정의

---
nest js 모듈이란
  모듈은 @Module () 데코레이터로 주석이 달린 클래스입니다.
  @Module() 데코레이터는 Nest 가 애플리케이션 구조를 구성하는 데 사용하는 메타 데이터를 제공합니다.
  각 응용 프로그램에는 하나 이상의 모듈(루트 모듈)이 있습니다. 루트 모듈은 Nest가 사용하는 시작점입니다.
  모듈은 밀접하게 관련된 기능 집합으로 구성 요소를 구성하는 효과적인 방법입니다. (기능별로 만듭니다. ex) 유저 모듈, 주문모듈, 챗 모듈)
  같은 기능에는 해당하는 것들은 하나의 모듈  폴더안에 넣어서 사용합니다. (UserController, UserService, UserEntity 다 같은 기능이기에 UserModule에 넣습니다.)
  모듈은 기본적으로 싱글톤이므로 여러 모듈간에 쉽게 공급자의 동일한 인스턴스를 공유할 수 있습니다.
    
    싱글톤 패턴이란?
      객체의 인스턴스가 오직 1개만 생성되는 패턴을 의미합니다.
      객체를 미리 생성해두고 가져오는 방법이 있습니다.
      최초 한번의 new 연산자를 통해서 고정된 메모리 영역을 사용하기 때문에 추후 해당 객체에 접근할 때 메모리 낭비를 방지할 수 있습니다.
      다른 클래스 간에 데이터 공유가 쉽습니다. (여러 클래스의 인스턴스에서 싱글톤 인스턴스의 데이터에 동시에 접근하게 되면 동시성 문제가 발생할 수 있습니다.)

Controller 란?
  컨트롤러는 들어오는 요청을 처리하고 클라이언트에 응답을 반환합니다.
  컨트롤러는 @Controller 데코레이터로 클래스를 데코레이션하여 정의됩니다.
  데코레이터는 인자를 Controller에 의해서 처리되는 "경로"로 받습니다.

Handler 란?
  핸들러는 @GET, @POST, @DELETE 등과 같은 데코레이터로 장식된 컨트롤러 클래스 내의 단순한 메서드입니다.

service 란?
  서비스는 소프트웨어 개발내의 공통 개념이며, NestJs, Javascript에서만 쓰이는 개념이 아닙니다.
  @Injectable 데코레이터로 감싸져서 모듈에 제공되며, 이 서비스 인스턴스는 애플리케이션 전체에서 사용될 수 있습니다.
  서비스는 컨트롤러에서 데이터의 유효성을 체크를 하거나 데이터베이스에 아이템을 생성하는 등의 작업을 하는 부분을 처리합니다.
  Service에서는 데이터베이스 관련된 로직을 처리합니다.

providers 란?
  프로바이더는 Nest의 기본 개념입니다.
  대부분의 기본 Nest 클래스는 서비스, 레파지토리, 팩토리, 헬퍼등 프로바이더로 취급될 수 있습니다.
  프로바이더의 주요 아이디어는 종속성을 주입할 수 있다는 것입니다.
  즉, 객체는 서로 다양한 관계를 만들 수 있으며 객체의 인스턴스를 "연결"하는 기능은 대부분 Nest 런타임 시스템에 위임될 수 있습니다.

Nest에서 클라이언트에서 보내온 값들을 핸들러에서 어떻게 가져올까?
Express에서는 bodyParser 모듈을 이용해서
req.body 이런식으로 클라이언트에서 보내온 값을 받아왔습니다.

  NestJs에서는 어떻게 받아올까??
  NestJs에서는 @Body() body를 이용해서 가져옵니다.
  이렇게 하면 모든 request에서 보내온 값을 가져올 수 있으며,
  하나씩 가져오려면 @Body('title') title 혹은 @Body('description') description 이런식으로 가져오시면 됩니다.

DTO(Data Transfer Object) 란?
  계층간 데이터 교환을 위한 객체입니다.
  DB에서 데이터를 얻어 Service나 Controller 등으로 보낼 때 사용하는 객체를 말합니다.
  DTO는 데이터가 네트워크를 통해 전송되는 방법을 정의하는 객체입니다.
  interface나 class를 이용해서 정의될 수 있습니다.( class를 이용하는 것을 NestJs에서 추천하고 있습니다.)

DTO를 쓰는 이유는 무엇인가요?
  데이터 유효성을 체크하는 데 효율적입니다.
  더 안정적인 코드로 만들어줍니다. 타입스크립트의 타입으로도 사용됩니다.

NestJs에서 데이터 처리의 흐름을 보면...
  Board를 위한 Property들을 여러 곳에서 사용하고 있습니다.(title, description)
  지금은 간단한 애플리케이션을 만들기 때문에 몇개의 프로퍼티만 불러주고 몇군데에서만 불러주면 됩니다.
  하지만 정말 많은 프로퍼티를 갖고 정말 여러군데에서 이용하며, 갑자기 한곳에서 Property 이름을 바꿔줘야한다면 어떻게 해아할까요?
  그러면 다른 곳에서 똑같이 쓰인 모든 곳의 프로퍼티도 똑같이 바꿔줘야 합니다...
  이렇게 된다면 애플리케이션을 유지보수하기 정말 힘들어 질 수가 있습니다.
  이러한 경우에 DTO를 사용해서 이 문제를 해결할 수 있습니다.

Pipe 란?
  파이프는 @Injectable () 데코레이터로 주석이 달린 클래스입니다.
  파이프는 data transformation과 data validation을 위해서 사용 됩니다.
  파이프는 컨트롤러 경로 처리기에 의해 처리되는 인수에 대해 작동합니다.
  Nest는 메소드가 호출되기 직전에 파이프를 삽입하고 파이프는 메소드로 향하는 인수를 수신하고 이에 대해 작동합니다.

Pipe 사용하는 법
  파이프를 사용하는 방법(Binding Pipes)은 세가지로 나눠질 수 있습니다.
  Handler-level Pipes, Parameter-level Pipes, Global-level Pipes 입니다.
  이름에서 말하는 것 그래도 핸들러 레벨, 파라미터 레벨, 글로벌 레벨로 파이프를 사용할 수 있습니다.

  Handler-level Pipes
    핸들러 레벨에서 @UsePipes() 데코레이터를 이용해서 사용할 수 있습니다.
    이 파이프는 모든 파라미터에 적용됩니다. (title, description)

    ex)
    @Post()
    @UsePipes(pipe)
    createBoard(
      @Body('title') title,
      @Body('description') description,
    ) {}

  Parameter-level Pipes
    파라미터 레벨의 파이프이기에
    특정한 파라미터에게만 적용이 되는 파이프입니다.
    
    ex)
    @Post()
    createBoard(
      @Body('title', ParameterPipe) title,
      @Body('description') description,
    ) {}

  Global-level Pipes
    글로벌 파이프로서 애플리케이션 레벨의 파이프입니다.
    클라이언트에서 들어오는 모든 요청에 적용됩니다.
    가장 상단 영역인 main.ts에 넣어주시면 됩니다.

    ex)
    async function bootstrap() {
      const app = await NestFactory.create(AppModule);
      app.useGlobalPipes(GlobalPipes)
      await app.listen(3000)
    }
    bootstrap()

Built-in Pipes
  NestJs에 기본적으로 사용할 수 있게 만들어 놓은 6가지의 파이프가 있습니다.
  - VaildationPipe
  - ParseIntPipe
  - ParseBoolPipe
  - ParseArrayPipe
  - ParseUUIDPipe
  - DefaultValuePipe

필요한 모듈
  class-validator, class-transformer
  class-validator 문서 : https://github.com/typestack/class-validator#manual-validation

커스텀 파이프 구현 방법
  먼저 PipeTransform이란 인터페이스를 새롭게 만들 커스텀 파이프에 구현해줘야 합니다.
  이 Pipe Transform 인터페이스는 모든 파이프에서 구현해줘야 하는 인터페이스입니다.
  그리고 이것과 함께 모든 파이프는 transform() 메서드를 필요합니다.
  이 메서드는 NestJs가 인자(arguments)를 처리하기 위해서 사용됩니다.

  ex)
  export class BoardStatusValidationPipe implements PipeTransform {
    transform(value: any, metadata: ArgumentMetadata) {
      console.log('value', value)
      console.log('metadata', metadata)

      return value
    }
  }

transform() 메서드
  이 메서드는 두개의 파라미터를 가집니다.
  첫번째 파라미터는 처리가 된 인자의 값이며,
  두번째 파라미터는 인자에 대한 메타 데이터를 포함한 객체입니다.
  transform() 메서드에서 return 된 값은 Route 핸들러로 전해집니다.
  만약 예외(Exception) 가 발생하면 클라이언트에 바로 전해집니다.

readonly class property
  접두사(prefix) readonly는 속성을 읽기 전용으로 만드는 데 사용됩니다.
  읽기 전용 멤버는 클래스 외부에서 액세스 할 수 있지만 해당 값은 변경할 수 없습니다.