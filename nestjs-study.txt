nest new 프로젝트 이름 : 프로젝트 시작하기
nest g module 모듈 이름 : 모듈 생성하기
nest g controller 컨트롤러 이름 : 컨트롤러 생성하기 (--no-spec : 테스트를 위한 소스 코드 생성 X)

eslintrc,js : 개발자들이 특정한 규칙을 가지고 코드를 깔끔하게 짤수있개 도와주는 라이브러리,
              타입스크립트를 쓰는 가이드 라인 제시, 문법에 오류가 나면 알려주는 역할 등등

prettierrc : 주로 코드 형식을 맞추는 데 사용함, 작은따옴표를 사용할지 큰따옴표를 사용할지, indent 값을 2로 할지 4로 줄지 등등
              에러를 찾는 것이 아닌 코드 포맷터 역할

nest-cli.json : nest 프로젝트를 위해 특정한 설정을 할 수 있는 json 파일

tsconfig.json : 어떻게 타입스크립트를 컴파일 할지 설정

tsconfig.build.json : tsconfig.json의 연장선상 파일이며, build를 할 때 필요한 설정들, excludes에서는 빌드할 때 필요없는 파일 명시

package.json : build => 운영환경을 위한 빌드, format => 린트 에러가 났을 지 수정, start => 앱 시작

src 디렉토리 : 대부분의 비즈니스 로직이 들어가는 곳
  main.ts : 앱을 생성하고 실행
  app.module.ts : 앱 모듈의 정의

---
nest js 모듈이란
  모듈은 @Module () 데코레이터로 주석이 달린 클래스입니다.
  @Module() 데코레이터는 nest 가 애플리케이션 구조를 구성하는 데 사용하는 메타 데이터를 제공합니다.
  각 응용 프로그램에는 하나 이상의 모듈(루트 모듈)이 있습니다. 루트 모듈은 nest가 사용하는 시작점입니다.
  모듈은 밀접하게 관련된 기능 집합으로 구성 요소를 구성하는 효과적인 방법입니다. (기능별로 만듭니다. ex) 유저 모듈, 주문모듈, 챗 모듈)
  같은 기능에는 해당하는 것들은 하나의 모듈  폴더안에 넣어서 사용합니다. (UserController, UserService, UserEntity 다 같은 기능이기에 UserModule에 넣습니다.)
  모듈은 기본적으로 싱글톤이므로 여러 모듈간에 쉽게 공급자의 동일한 인스턴스를 공유할 수 있습니다.
    
    싱글톤 패턴이란?
      객체의 인스턴스가 오직 1개만 생성되는 패턴을 의미합니다.
      객체를 미리 생성해두고 가져오는 방법이 있습니다.
      최초 한번의 new 연산자를 통해서 고정된 메모리 영역을 사용하기 때문에 추후 해당 객체에 접근할 때 메모리 낭비를 방지할 수 있습니다.
      다른 클래스 간에 데이터 공유가 쉽습니다. (여러 클래스의 인스턴스에서 싱글톤 인스턴스의 데이터에 동시에 접근하게 되면 동시성 문제가 발생할 수 있습니다.)

Controller 란?
  컨트롤러는 들어오는 요청을 처리하고 클라이언트에 응답을 반환합니다.
  컨트롤러는 @Controller 데코레이터로 클래스를 데코레이션하여 정의됩니다.
  데코레이터는 인자를 Controller에 의해서 처리되는 "경로"로 받습니다.

Handler 란?
  핸들러는 @GET, @POST, @DELETE 등과 같은 데코레이터로 장식된 컨트롤러 클래스 내의 단순한 메서드입니다.